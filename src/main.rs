#![cfg_attr(not(test), no_std)]
#![cfg_attr(not(test), no_main)]

use ckb_std::syscalls::current_cycles;

#[cfg(test)]
extern crate alloc;

#[cfg(not(test))]
ckb_std::entry!(program_entry);
#[cfg(not(test))]
ckb_std::default_alloc!(4 * 1024, 1024 * 1024, 64);
const MESSAGE: &'static [u8] = b"hello, world!";

mod ecc;
mod rsa;
mod rsa2;
mod rsa2_linkable;
mod utils;

pub fn program_entry() -> i8 {
    let mut buf = [0u8; 1032260];
    let got_len =
        ckb_std::syscalls::load_cell_data(&mut buf, 0, 0, ckb_std::ckb_constants::Source::Input)
            .unwrap();
    ckb_std::debug!("Read data {}", got_len);
    // check_hash_rsa(MESSAGE).unwrap();
    // ecc::check_hash_ecc(&MESSAGE, &buf).unwrap();
    rsa2_linkable::check_hash_rsa2(
        &MESSAGE,
        &buf,
        Some(|i: usize| {
            ckb_std::debug!("read {}, cycle {}", i, current_cycles());
        }),
    )
    .unwrap();

    0
}

// #[test]
// fn test_ecc() {
//     let ecc_data = include_bytes!("../assets/sign-ecc-10.bin");
//     ecc::check_hash_ecc(&MESSAGE, &ecc_data[..]).unwrap();
// }

#[test]
fn test_rsa() {
    let rsa_data = include_bytes!("../assets/sign-rsa2l-700.bin");
    // rsa::check_hash_rsa(&MESSAGE, &rsa_data[..]).unwrap();
    rsa2_linkable::check_hash_rsa2(
        &MESSAGE,
        rsa_data,
        Some(|i: usize| {
            std::println!("Running {}", i);
        }),
    )
    .unwrap();
}

// #[test]

// fn test1() {
//     type Uint2048 = BUint<32>;

//     let a = Uint2048::parse_str_radix("29678273528600741144075435336018962313928421153113560798559476706616240875467705892642509540550944395989682403382365238846331486860210437977240215373738143539806330174010777905391969196442214711132144950353958014943023953486196911835247224871904185353646406908778564889717186343085488382564375688069259116405808103457028990887261144201307773284292790584931592917162277251699705812743183845845966370582144330172155835159462715716401036182781653803600753356769186902733890787373792022892820247774427105836831787458617186016631510489797320014560662726384050093634330627543578384760673567202180638900449598961434776304234", 10);
//     let i = Uint2048::parse_str_radix("16158503035655503650357438344334975980222051334857742016065172713762327569433945446598600705761456731844358980460949009747059779575245460547544076193224141560315438683650498045875098875194826053398028819192033784138396109321309878080919047169238085235290822926018152521443787945770532904303776199561965192760957166694834171210342487393282284747428088017663161029038902829665513096354230157075129296432088558362971801859230928678799175576150822952201848806616643615613562842355410104862578550863465661734839271290328348967522998634176499319107762583194718667771801067716614802322659239302476074096777926805529798115328", 10); // 2^{2047}
//     let p = Uint2048::parse_str_radix("17898282809213247359288874181411003070173506354386267929191130126234852464106308485444867387430442663216227142645197049239437364279680576832552132692381875575827244962094414165399558473441914496588051282805054322056686885876603882471031777817418272159612740551983601638571170184757907641625377057807318260101848472027154375802571973321716427633054784164608832497434851307568418235268261836525715385126047579394060048347604495094060490851753047157435591110608107606756576086235403702740320253898317167518818736813724086119881934261948919955120207668697729308575388509409018666065301896396208229156560700114505653643049", 10);
//     let t1 = std::time::Instant::now();

//     let r1 = multi_step_power::<32, 64>(a.clone(), i.clone(), p.clone());
//     let t2 = std::time::Instant::now();

//     let r2 = power_mod_buint::<32, 64>(a, i, p);
//     let t3 = std::time::Instant::now();

//     println!("{} {}", r1, (t2 - t1).as_nanos());
//     println!("{} {}", r2, (t3 - t2).as_nanos());
// }
